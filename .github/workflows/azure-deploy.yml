name: CI/CD Azure Function App (Optimizado)

on:
  push:
    branches:
      - main  # Ramas que activan el workflow
  workflow_dispatch:  # Permite ejecutar manualmente el workflow

env:
  PYTHON_VERSION: '3.11'
  PACKAGE_ZIP_FILE: 'deployment_package.zip'
  PYTHON_PACKAGE_DIR: './.python_packages/lib/site-packages'
  ARTIFACT_NAME: 'python-functionapp-package'

jobs:
  # --- JOB DE CONSTRUCCIÓN Y CHEQUEOS ---
  build_and_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      needs_deployment: ${{ steps.check_branch.outputs.needs_deployment }}
      artifact_name: ${{ env.ARTIFACT_NAME }}

    steps:
    - name: Checkout del código
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache de dependencias Pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

    - name: Instalar dependencias (Proyecto y Herramientas Dev)
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest mypy bandit types-requests

    # --- Chequeos de Calidad ---
    - name: Linting con Flake8
      run: |
        source venv/bin/activate
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,__pycache__,.git,.github,*.egg-info,.pytest_cache,.python_packages,venv,shared

    - name: Chequeo de Tipos con MyPy
      run: |
        source venv/bin/activate
        mypy . --ignore-missing-imports --exclude venv --exclude .python_packages --exclude .venv --exclude shared

    - name: Análisis de Seguridad con Bandit
      run: |
        source venv/bin/activate
        bandit -r . -ll --skip B113 --exclude ./.venv,./.python_packages,./tests,./venv,./shared

    - name: Ejecutar Pruebas con Pytest
      run: |
        source venv/bin/activate
        pytest --disable-warnings

    # --- Crear Artefactos ---
    - name: Crear directorio de dependencias para paquete
      run: mkdir -p ${{ env.PYTHON_PACKAGE_DIR }}

    - name: Instalar dependencias en carpeta de despliegue
      run: |
        source venv/bin/activate
        pip install --target="${{ env.PYTHON_PACKAGE_DIR }}" -r requirements.txt

    - name: Crear archivo Zip para despliegue
      run: |
        zip --quiet -r ${{ env.PACKAGE_ZIP_FILE }} . -x ".venv/*" ".git/*" ".github/*" "tests/*" "*.pyc" "*__pycache__*" ".pytest_cache/*" "local.settings.json" "*.log"

    - name: Subir artefacto de despliegue
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.PACKAGE_ZIP_FILE }}

    - name: Determinar si se debe desplegar
      id: check_branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "needs_deployment=true" >> $GITHUB_OUTPUT
        else
          echo "needs_deployment=false" >> $GITHUB_OUTPUT

  # --- JOB DE DESPLIEGUE ---
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success() && needs.build_and_test.outputs.needs_deployment == 'true'

    permissions:
      id-token: write
      contents: read

    environment:
      name: production
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}

    steps:
    - name: Descargar artefacto del job de build
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build_and_test.outputs.artifact_name }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Desplegar a Azure Functions
      uses: Azure/functions-action@v1
      id: deploy-to-function
      with:
        app-name: 'EliteDynamicsFuncions'
        slot-name: 'Production'
        package: ${{ env.PACKAGE_ZIP_FILE }}

    - name: Logout from Azure
      run: |
        az logout
        az cache purge
        az account clear
      if: always()
