name: Azure Functions Python CI/CD Avanzado

on:
  push:
    branches:
      - main # Despliega en cada push a main
  pull_request:
    branches:
      - main # Ejecuta chequeos (lint, test) en cada PR a main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      needs_deployment: ${{ steps.check_branch.outputs.needs_deployment }} # Indica si es un push a main

    steps:
    - name: Checkout del código
      uses: actions/checkout@v4

    - name: Configurar Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # --- Caché de Dependencias ---
    - name: Cache de dependencias Pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # --- Instalación de Dependencias ---
    - name: Instalar dependencias y herramientas de desarrollo
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Si tuvieras un requirements-dev.txt:
        # pip install -r requirements-dev.txt

    # --- Calidad y Pruebas ---
    - name: Linting con Flake8
      run: |
        source .venv/bin/activate
        # Revisa el código, falla si hay errores E9*, F* (SyntaxError, UndefinedName, etc.)
        # Excluye el entorno virtual y cachés comunes. Ajusta según necesites.
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,__pycache__,.git,.github,*.egg-info,.pytest_cache

    - name: Ejecutar Pruebas con Pytest
      run: |
        source .venv/bin/activate
        # Ejecuta pytest. Necesitas tener archivos de prueba (ej. tests/test_*.py)
        pytest

    # --- Crear Paquete de Despliegue ---
    - name: Instalar dependencias en carpeta de despliegue
      id: install_deps
      run: |
        source .venv/bin/activate
        pip install --target="./.python_packages/lib/site-packages" -r requirements.txt

    - name: Crear archivo Zip para despliegue
      id: create_package
      run: |
        # Empaqueta el código y las dependencias. Verifica inclusiones/exclusiones.
        zip --quiet -r deployment_package.zip . -x ".venv/*" ".git/*" ".github/*" "tests/*" "*.pyc" "*__pycache__*" ".pytest_cache/*" "local.settings.json" ".vscode/*" "readme.md" ".gitignore" "profile.xml" # Excluir profile.xml si se generó localmente
        echo "package_path=deployment_package.zip" >> $GITHUB_OUTPUT

    # --- Subir Artefacto (Opcional pero recomendado) ---
    - name: Subir artefacto de despliegue
      uses: actions/upload-artifact@v4
      with:
        name: python-functionapp-package
        path: deployment_package.zip

    # --- Verificar si es necesario desplegar (solo en push a main) ---
    - name: Determinar si se debe desplegar
      id: check_branch
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "needs_deployment=true" >> $GITHUB_OUTPUT
        else
          echo "needs_deployment=false" >> $GITHUB_OUTPUT
        fi

  # --- Job de Despliegue (depende del job anterior) ---
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: needs.build_and_test.outputs.needs_deployment == 'true'

    environment:
      name: production # Opcional: Entorno de GitHub
      url: ${{ steps.deploy_to_azure.outputs.webapp-url }}

    steps:
    - name: Checkout del código (Necesario si no descargas artefacto explícitamente aquí)
      uses: actions/checkout@v4

    # --- Descargar Artefacto (si se subió en el job anterior) ---
    - name: Descargar artefacto de despliegue
      uses: actions/download-artifact@v4
      with:
        name: python-functionapp-package
        # path: . # Por defecto descarga al directorio raíz del workspace

    # --- Desplegar a Azure Functions ---
    - name: Desplegar a Azure Functions
      id: deploy_to_azure
      uses: Azure/functions-action@v1
      with:
        app-name: EliteDynamicsFuncions # Confirma que este es el nombre correcto
        package: deployment_package.zip # Despliega el paquete .zip
        publish-profile: ${{ secrets.AZURE_FUNCTIONS_PUBLISH_PROFILE_EliteDynamicsFuncions }} # Usa el secreto que creaste
        
